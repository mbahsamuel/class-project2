AWSTemplateFormatVersion: 2010-09-09
Description: A CloudFormation template for Deploying iws-console and Autoscaling targetting EC2 instances.
Parameters:
  pApplicationGroup:
    Description: Desamist Application Group used in EC2 tags
    Default: /dsm/io/zos/ApplicationGroup
    Type: AWS::SSM::Parameter::Value<String>
    ConstraintDescription: Application Groups of the EC2 instance.
  pApplicationSubGroup:
    Description: Application Sub Group
    Type: AWS::SSM::Parameter::Value<String>
    Default: /dsm/io/zos/ApplicationSubGroup
  pSecurityGroup:
    Description: Application Sub Group
    Type: AWS::SSM::Parameter::Value<String>
    Default: /dsm/io/zos/SecurityGroup
  pProject:
    Type:  String
    Description: Project Identifier.
    Default: zos
  pDepartment:
    Type:  String
    Description: Department Identified
    Default: io
  pLandscape:
    Description: Environment ID
    Type: AWS::SSM::Parameter::Value<String>
    Default: /desamist/aws/account/ENV
  pCostCenter:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /desamist/cloud-solutions/CostCenter
    Description: CostCenter
  pFundingSource:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /desamist/cloud-solutions/FundingType
    Description: Funding Source.
  pWBSE:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /desamist/io/zos/WBSE
    Description: Project WBS ID.
  pITDR:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /desamist/io/zos/ITDR
    Description: ITDR number.
  pEnvironment:
    Description: Environment
    Type: AWS::SSM::Parameter::Value<String>
    Default: /desamist/aws/account/env-letter
  pELBType:
    Type: String
    Description: Elastic Load Balancer Type.
    Default: application
    AllowedValues:
      - application
  pCertificateArn:
    Type:  AWS::SSM::Parameter::Value<String>
    Default: /desamist/io/zos/CertificateArn
    Description: The ARN for the Listener Certificate of the Loadbalancer. Obtain the ARN from Certicate Manager
  pHTTPListenerPort:
    Type: String
    Default: 80
    Description: HTTP Listner port. Blank out of this parameter if HTTP listener is not required.
  pOperatorEmail:
    Description: The email address to notify when there are any scaling activities
    Type: AWS::SSM::Parameter::Value<String>
    Default: /dsm/io/zos/OperatorEmail
  pClusterName:
    Description: The name of the EC2 instance Cluster
    Type: String
    Default: AppCluster
  pInstanceType:
     Type: String
     Default: t3a.medium
     Description: Instance Type
     AllowedValues: [t3.nano,t3.micro,t3.small,t3.medium,t3.large,t3.xlarge,t3.2xlarge,
      t3a.nano,t3a.micro,t3a.small,t3a.medium,t3a.large,t3a.xlarge,t3a.2xlarge,
      m5.large,m5.xlarge,m5.2xlarge,m5.4xlarge,m5.8xlarge,
      m5a.large,m5a.xlarge,m5a.2xlarge,m5a.4xlarge,m5a.8xlarge,
      c5.large,c5.xlarge,c5.2xlarge,c5.4xlarge,c5.9xlarge,
      c5a.large,c5a.xlarge,c5a.2xlarge,c5a.4xlarge,c5a.8xlarge,
      r5.large,r5.xlarge,r5.2xlarge,r5.4xlarge,r5.8xlarge,
      r5a.large,r5a.xlarge,r5a.2xlarge,r5a.4xlarge,r5a.8xlarge,r6i.2xlarge,
      m6a.large,m6a.xlarge,m6a.2xlarge,m6a.4xlarge,m6a.8xlarge,r6a.2xlarge,r6a.xlarge]
  pKeyName:
    Description: PEM Key for SSH
    Type:  AWS::SSM::Parameter::Value<String>
    Default: /desamist/cloud-solutions/Keyname
    ConstraintDescription: PEM Key for SSH
  pEc2RootEBSVolumeSize:
    Description: The volume size, in gibibytes (GiB).
    Type: String
    Default: 100
    ConstraintDescription: This must be valid number
  pEc2SDBEBSVolumeSize:
    Description: The volume size, in gibibytes (GiB). /opt
    Type: String
    Default: 100
    ConstraintDescription: This must be valid number
  pEc2SDFEBSVolumeSize:
    Description: The volume size, in gibibytes (GiB). Optional Addtional Volumne. Update the size
    Type: String
    Default: 0
    ConstraintDescription: This must be valid number

  pAvailabilityZone1:
    Type: String
    Description: Availability zone where we need this EC2 to be placed
    Default: us-east-1a
    AllowedValues:
      - us-east-1a
      - us-east-1b
      - us-east-1d
    ConstraintDescription: AWS Availability zone where EC2 instance will be created.
    
  pAvailabilityZone2:
    Type: String
    Description: Availability zone where we need this EC2 to be placed
    Default: us-east-1b
    AllowedValues:
      - us-east-1a
      - us-east-1b
      - us-east-1d
    ConstraintDescription: AWS Availability zone where EC2 instance will be created.
  pAvailabilityZone3:
    Type: String
    Description: Availability zone where we need this EC2 to be placed
    Default: us-east-1d
    AllowedValues:
      - us-east-1a
      - us-east-1b
      - us-east-1d
    ConstraintDescription: AWS Availability zone where EC2 instance will be created.

  pTargetPort1:
    Type: String
    Default: 8080
    Description: HTTP Target port
  pHTTPSListenerPort:
    Type: String
    Default: 443
    Description: HTTPS Listner port. Blank out of this parameter if HTTPS listener is not required.
  pTargetPort2:
    Type: String
    Default: 443
    Description: HTTPS Target group
  pawsmigrationprojectid:
    Type:  AWS::SSM::Parameter::Value<String>
    Default: /desamist/cloud-solutions/ProjectCode
    Description: aws-migration-project-id
  pmapmigrated:
    Type:  AWS::SSM::Parameter::Value<String>
    Default: /desamist/cloud-solutions/MapMigration
    Description: map-migrated
  pHostName1:
    Description: FQDN Hostname of EC2 instance - Mandatory Parameter
    Type:  String
  pHostName2:
    Description: FQDN Hostname of EC2 instance - Mandatory Parameter
    Type:  String
  pDBCluster:
    Description: FQDN Hostname of EC2 instance - Mandatory Parameter
    Type: String
    # Default: t1
    # ConstraintDescription: Host name can not be empty 
  pAWSregion:
    Type: String
    Default: us-east-1
    Description: AWS region
  pVPC:
    Description: vpc id
    Default: /desamist/cloud-solutions/vpc
    Type: AWS::SSM::Parameter::Value<String>
  pDomainOUPath:
    Description: Active Directory Custom OU Path. If this is blank, ApplicationGroup/Landscpe hierarchy will be used
    Type: String
    Default: ""
    ConstraintDescription: This must be valid OU Path that exist

Conditions:
  IsLegacyEnterprise: !Equals [!Ref AWS::AccountId, '128211541887']
  cIsNonProd: !Or
    - !Equals
      - !Ref pLandscape
      - DEV
    - !Equals
      - !Ref pLandscape
      - TEST
    - !Equals
      - !Ref pLandscape
      - STAGE
  cIsProd: !Equals
    - !Ref pLandscape
    - PROD
  SDBEBSVolCondtion: !Not [!Equals [!Ref pEc2SDBEBSVolumeSize, 0]]
  SDFEBSVolCondtion: !Not [!Equals [!Ref pEc2SDFEBSVolumeSize, 0]]
Mappings:
  mEC2Map:
    DEV:
      VPCId: vpc-0aa9799898d383e32
      ELBSecurityGroupID: sg-0204c09a532ab86d5
    TEST:
      VPCId: vpc-0aa9799898d383e32
      ELBSecurityGroupID: sg-0204c09a532ab86d5
    STAGE:
      VPCId: vpc-0aa9799898d383e32
      ELBSecurityGroupID: sg-0204c09a532ab86d5
    PROD:
      VPCId: vpc-3da5f259
      ELBSecurityGroupID: sg-097fcc663101c7ce7

  mAzToNonProdSubnetMap:
    us-east-1a:
      ELBSubNetId: subnet-04b0e4e3029309669
    us-east-1b:
      ELBSubNetId: subnet-095b95dae131c5050
    us-east-1d:
      ELBSubNetId: subnet-0597f2c1ab2fc49e9
    us-east-1e:
      ELBSubNetId: subnet-66fb9f5b
  mAzToProdSubnetMap:
    us-east-1a:
      ELBSubNetId: subnet-04b0e4e3029309669
    us-east-1b:
      ELBSubNetId: subnet-095b95dae131c5050
    us-east-1d:
      ELBSubNetId: subnet-0597f2c1ab2fc49e9
    us-east-1e:
      ELBSubNetId: subnet-66fb9f5b
  mEC2MapMulti:
      DEV:
        SecurityGroupID: sg-0204c09a532ab86d5
      TEST:
        SecurityGroupID: sg-052bc230628713297
      STAGE:
        SecurityGroupID: sg-0f1744d9bab3976cd
      PROD:
        SecurityGroupID: sg-08333fb0ff915fe2c
      SharedServices:
        SecurityGroupID: sg-0556b0be39af3f13f
Resources:
  # rSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: !Sub ${pDepartment}-${pProject}-${pLandscape}-iwsconsole${pDBCluster}-SG
  #     GroupDescription: zos APP Security Group
  #     VpcId: !Ref pVPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 50100
  #         ToPort: 50101
  #         Description: "Allow  Traffic for  instance"
  #         CidrIp: 10.224.64.0/18
  #       - IpProtocol: tcp
  #         FromPort: 9443
  #         ToPort: 9444
  #         Description: "Allow  Traffic for  instance"
  #         CidrIp: 10.224.8.0/18
  #       - IpProtocol: tcp
  #         FromPort: 9443
  #         ToPort: 9444
  #         Description: "Allow  Traffic for  instance"
  #         CidrIp: 10.224.24.0/18
  #       - IpProtocol: tcp
  #         FromPort: 9443
  #         ToPort: 9444
  #         Description: "Allow  Traffic for  instance"
  #         CidrIp: 10.0.0.0/8
  #       - IpProtocol: tcp
  #         FromPort: 22
  #         ToPort: 22
  #         Description: Allow ssh access
  #         CidrIp: 10.0.0.0/8
  #       - IpProtocol: '-1'
  #         CidrIp: 172.16.0.0/12
  #       - IpProtocol: icmp
  #         FromPort: -1
  #         ToPort: -1
  #         Description: Allow for ping
  #         CidrIp: 10.0.0.0/8
  #     SecurityGroupEgress:
  #       - IpProtocol: '-1'
  #         CidrIp: 0.0.0.0/0
  #     Tags:
  #       - Key: ApplicationGroup
  #         Value: !Ref pApplicationGroup
  #       - Key: ApplicationSubGroup
  #         Value: !Ref pApplicationSubGroup
  #       - Key: Project
  #         Value: !Ref pProject
  #       - Key: CostCenter
  #         Value: !Ref pCostCenter
  #       - Key: FundingSource
  #         Value: !Ref pFundingSource
  #       - Key: Landscape
  #         Value: !Ref pLandscape
  #       - Key: ITDR
  #         Value: !Ref pITDR
  #       - Key: WBSE
  #         Value: !Ref pWBSE
  #       - Key: Department
  #         Value: !Ref pDepartment
  #       - Key: Name
  #         Value: !Sub ${pDepartment}-${pProject}-${pLandscape}-iwsconsole${pDBCluster}-SG
  #       - Key: aws-migration-project-id
  #         Value: !Ref pawsmigrationprojectid
  #       - Key: map-migrated
  #         Value: !Ref pmapmigrated
  #       - Key: !Sub ${pDepartment}-${pProject}aws:cloudformation:stack-name"
  #         Value: !Ref "AWS::StackName"
  rEc2Instance1:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          BootStrap:       # configSet is used when cfn-init is called with -c option
            - init
            # - install
            # - appdynamics
        init:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                      "agent": {
                              "metrics_collection_interval": 60,
                              "run_as_user": "root"
                      },
                      "metrics": {
                              "append_dimensions": {
                                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                                      "ImageId": "${!aws:ImageId}",
                                      "InstanceId": "${!aws:InstanceId}",
                                      "InstanceType": "${!aws:InstanceType}"
                              },
                              "metrics_collected": {
                                      "disk": {
                                              "measurement": [
                                                      "used_percent"
                                              ],
                                              "metrics_collection_interval": 60,
                                              "resources": [
                                                      "*"
                                              ]
                                      },
                                      "mem": {
                                              "measurement": [
                                                      "mem_used_percent"
                                              ],
                                              "metrics_collection_interval": 60
                                      },
                                      "statsd": {
                                              "metrics_aggregation_interval": 60,
                                              "metrics_collection_interval": 10,
                                              "service_address": ":8125"
                                      }
                              }
                      }
                }
              mode: "000744"
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref AWS::StackName
                  - "\n"
                  - region=
                  - !Ref AWS::Region
                  - "\n"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.rEc2Instance1.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=cfn-init.exe -v -c BootStrap -s '
                  - !Ref AWS::StackId
                  - ' --resource rEc2Instance1'
                  - ' --region '
                  - !Ref AWS::Region
                  - "\n"
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT60M"
    Properties:
      InstanceType: !Ref pInstanceType
      SecurityGroupIds:
        - !Ref pSecurityGroup
      KeyName: !Ref pKeyName
      ImageId: '{{resolve:ssm:/desamist/cloud-solutions/rhel9/AMI}}'
      IamInstanceProfile: cloudwatch-ssm-role
      EbsOptimized: True
      DisableApiTermination: false
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          # Root Volume
          Ebs:
            VolumeSize: !Ref pEc2RootEBSVolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
        - Fn::If:
          - SDFEBSVolCondtion
          - DeviceName: "/dev/sdf"
            Ebs:
              VolumeSize: !Ref pEc2SDFEBSVolumeSize
              VolumeType: gp3
              DeleteOnTermination: true
              Encrypted: true
          - Ref: AWS::NoValue

        - Fn::If:
          - SDBEBSVolCondtion
          - DeviceName: /dev/sdb
            Ebs:
              VolumeType: gp3
              DeleteOnTermination: false
              VolumeSize: !Ref pEc2SDBEBSVolumeSize
              Encrypted: true
          - Ref: AWS::NoValue

      #SubnetId: !If [NonProd, !FindInMap [ mEC2AzToNonProdSubnetMap, !Ref pAvailabilityZone, SubNetId ], !FindInMap [ mEC2AzToProdSubnetMap, !Ref pAvailabilityZone, SubNetId ]]
      SubnetId:
         !If
          - IsLegacyEnterprise
          - !If [cIsNonProd, !FindInMap [ mAzToNonProdSubnetMap, !Ref pAvailabilityZone1, ELBSubNetId ], !FindInMap [ mAzToProdSubnetMap, !Ref pAvailabilityZone1, ELBSubNetId ]]
          - !Sub '{{resolve:ssm:/desamist/cloud-solutions/service-catalog/ec2/${pLandscape}/${pAvailabilityZone1}}}'
      Tags:
        - Key: ApplicationGroup
          Value: !Ref pApplicationGroup
        - Key: ApplicationSubGroup
          Value: !Ref pApplicationSubGroup
        - Key: Project
          Value: !Ref pProject
        - Key: CostCenter
          Value: !Ref pCostCenter
        - Key: FundingSource
          Value: !Ref pFundingSource
        - Key: Landscape
          Value: !Ref pLandscape
        - Key: ITDR
          Value: !Ref pITDR
        - Key: WBSE
          Value: !Ref pWBSE
        - Key: Department
          Value: !Ref pDepartment
        - Key: Name
          Value: !Sub ${pDepartment}-${pProject}-${pLandscape}-iwsconsole${pDBCluster}1
        - Key: aws-migration-project-id
          Value: !Ref pawsmigrationprojectid
        - Key: map-migrated
          Value: !Ref pmapmigrated
        - Key: !Sub ${pDepartment}-${pProject}aws:cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -ex
          umask 022
          exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1
          dnf clean all
          mkdir ~/tmp
          cd ~/tmp
          dnf -y update
          dnf -y install zip unzip wget npm glibc openssl curl openldap-clients nfs-utils postfix
          dnf -y install gcc openssl-devel bzip2-devel libffi-devel zlib-devel xz-devel
          dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm -y
          # dnf config-manager --set-enabled codeready-builder-for-rhel-8-rhui-rpms
          #dnf -y install python38
          dnf -y install make
          wget https://www.python.org/ftp/python/3.7.11/Python-3.7.11.tgz
          tar xvzf Python-3.7.11.tgz
          cd Python-3.7.11
          ./configure --enable-optimizations
          make altinstall
          /usr/local/bin/python3.7 --version
          /usr/local/bin/python3.7 -m pip install --upgrade pip

          #update hostname:
          hostnamectl set-hostname ${pHostName1}

          # Installing ssm agent
          dnf install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          systemctl status amazon-ssm-agent
          # Installing ssm agent -complete

          # Installing aws cli
          curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
          unzip awscli-bundle.zip
          /usr/local/bin/python3.7 awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
          /usr/local/bin/pip3.7 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          chmod +x /usr/local/aws/bin/aws

          # Installing aws cli -complete


    
          systemctl restart sshd.service
          systemctl restart sshd
          # Update etc/hosts
          fqdn_host_name=${pHostName1}
          #host_ip=$(hostname -i)
          host_ip=$(wget -q -O- http://169.254.169.254/latest/meta-data/local-ipv4)

          echo "$host_ip $host $fqdn_host_name $host" >> /etc/hosts

          #update /etc/postfix/main.cf
          sed -i 's/= hostname/'"= $host"'/g' /etc/postfix/main.cf

          #restart postfix service
          systemctl restart postfix
          #Install Cloudwatch agent.
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/redhat/amd64/latest/amazon-cloudwatch-agent.rpm
          rpm -U ./amazon-cloudwatch-agent.rpm

          # # Call cfn-init to perform other additional tasks realted appdynamics ageny
          cfn-init -v -c BootStrap --stack ${AWS::StackName} --resource rEc2Instance1 --region ${AWS::Region}


          #Installing AppDynamics agent - Complete
          #Install Signal Fx for Production landscape only
          # if [ "$landscape" = "PROD" ]
          # then
          #   echo "Installing SignalFx agents"
          #   signal_fx_token=`aws ssm get-parameter --name "/amtrak/cloud-solutions/service-catalog/ec2/signalfx-token" --output text --query Parameter.Value --region ${AWS::Region}`
          #   curl -sSL https://dl.signalfx.com/signalfx-agent.sh > ~/signalfx-agent.sh;
          #   chmod +x ~/signalfx-agent.sh
          #   ~/signalfx-agent.sh --realm us0 -- $signal_fx_token
          # fi

          dnf update -y 
          dnf install htop -y
          
          dnf clean all
          EC2_REGION=${pAWSregion}
          cd ~
          rm -rf ~/tmp
          # Start up the cfn-hup daemon to listen for changes to the EC2 metadata\n",
          cfn-hup || error_exit 'Failed to start cfn-hup'
           # Signal the status from cfn-init - This is signals Cloudformation template
          /usr/local/bin/cfn-signal -e $? \
            --stack ${AWS::StackName} \
            --resource rEc2Instance1  \
              --region ${AWS::Region}
  rEc2Instance2:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          BootStrap:       # configSet is used when cfn-init is called with -c option
            - init
            # - install
            # - appdynamics
        init:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                      "agent": {
                              "metrics_collection_interval": 60,
                              "run_as_user": "root"
                      },
                      "metrics": {
                              "append_dimensions": {
                                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                                      "ImageId": "${!aws:ImageId}",
                                      "InstanceId": "${!aws:InstanceId}",
                                      "InstanceType": "${!aws:InstanceType}"
                              },
                              "metrics_collected": {
                                      "disk": {
                                              "measurement": [
                                                      "used_percent"
                                              ],
                                              "metrics_collection_interval": 60,
                                              "resources": [
                                                      "*"
                                              ]
                                      },
                                      "mem": {
                                              "measurement": [
                                                      "mem_used_percent"
                                              ],
                                              "metrics_collection_interval": 60
                                      },
                                      "statsd": {
                                              "metrics_aggregation_interval": 60,
                                              "metrics_collection_interval": 10,
                                              "service_address": ":8125"
                                      }
                              }
                      }
                }
              mode: "000744"
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref AWS::StackName
                  - "\n"
                  - region=
                  - !Ref AWS::Region
                  - "\n"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.rEc2Instance2.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=cfn-init.exe -v -c BootStrap -s '
                  - !Ref AWS::StackId
                  - ' --resource rEc2Instance2'
                  - ' --region '
                  - !Ref AWS::Region
                  - "\n"
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT60M"
    Properties:
      InstanceType: !Ref pInstanceType
      SecurityGroupIds:
        - !Ref pSecurityGroup
        # !If
        #   - IsLegacyEnterprise
        #   - - !FindInMap [ mEC2Map, !Ref pLandscape, ELBSecurityGroupID ]
        #   - - !FindInMap [ mEC2MapMulti, !Ref pLandscape, SecurityGroupID ]
      KeyName: !Ref pKeyName
      ImageId: '{{resolve:ssm:/desamist/cloud-solutions/rhel9/AMI}}'
      # CpuOptions:
      #   CoreCount: 4
      #   ThreadsPerCore: 2
      IamInstanceProfile: cloudwatch-ssm-role
      EbsOptimized: True
      DisableApiTermination: false
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          # Root Volume
          Ebs:
            VolumeSize: !Ref pEc2RootEBSVolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
        - Fn::If:
          - SDFEBSVolCondtion
          - DeviceName: "/dev/sdf"
            #Additional Volume
            Ebs:
              VolumeSize: !Ref pEc2SDFEBSVolumeSize
              VolumeType: gp3
              DeleteOnTermination: true
              Encrypted: true
          - Ref: AWS::NoValue

        - Fn::If:
          - SDBEBSVolCondtion
          - DeviceName: /dev/sdb
            Ebs:
              VolumeType: gp3
              DeleteOnTermination: true
              VolumeSize: !Ref pEc2SDBEBSVolumeSize
              Encrypted: true
          - Ref: AWS::NoValue

      #SubnetId: !If [NonProd, !FindInMap [ mEC2AzToNonProdSubnetMap, !Ref pAvailabilityZone, SubNetId ], !FindInMap [ mEC2AzToProdSubnetMap, !Ref pAvailabilityZone, SubNetId ]]
      SubnetId:
         !If
          - IsLegacyEnterprise
          - !If [cIsNonProd, !FindInMap [ mAzToNonProdSubnetMap, !Ref pAvailabilityZone2, ELBSubNetId ], !FindInMap [ mAzToProdSubnetMap, !Ref pAvailabilityZone2, ELBSubNetId ]]
          - !Sub '{{resolve:ssm:/desamist/cloud-solutions/service-catalog/ec2/${pLandscape}/${pAvailabilityZone2}}}'
      Tags:
        - Key: ApplicationGroup
          Value: !Ref pApplicationGroup
        - Key: ApplicationSubGroup
          Value: !Ref pApplicationSubGroup
        - Key: Project
          Value: !Ref pProject
        - Key: CostCenter
          Value: !Ref pCostCenter
        - Key: FundingSource
          Value: !Ref pFundingSource
        - Key: Landscape
          Value: !Ref pLandscape
        - Key: ITDR
          Value: !Ref pITDR
        - Key: WBSE
          Value: !Ref pWBSE
        - Key: Department
          Value: !Ref pDepartment
        - Key: Name
          Value: !Sub ${pDepartment}-${pProject}-${pLandscape}-iwsconsole${pDBCluster}2
        - Key: aws-migration-project-id
          Value: !Ref pawsmigrationprojectid
        - Key: map-migrated
          Value: !Ref pmapmigrated
        - Key: !Sub ${pDepartment}-${pProject}aws:cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -ex
          umask 022
          exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1
          dnf clean all
          mkdir ~/tmp
          cd ~/tmp
          dnf -y update
          dnf -y install zip unzip wget npm glibc openssl curl openldap-clients nfs-utils postfix
          dnf -y install gcc openssl-devel bzip2-devel libffi-devel zlib-devel xz-devel
          dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm -y
          # dnf config-manager --set-enabled codeready-builder-for-rhel-8-rhui-rpms
          #dnf -y install python38
          dnf -y install make
          wget https://www.python.org/ftp/python/3.7.11/Python-3.7.11.tgz
          tar xvzf Python-3.7.11.tgz
          cd Python-3.7.11
          ./configure --enable-optimizations
          make altinstall
          /usr/local/bin/python3.7 --version
          /usr/local/bin/python3.7 -m pip install --upgrade pip

          #update hostname:
          hostnamectl set-hostname ${pHostName2}

          # Installing ssm agent
          dnf install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          systemctl status amazon-ssm-agent
          # Installing ssm agent -complete

          # Installing aws cli
          curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
          unzip awscli-bundle.zip
          /usr/local/bin/python3.7 awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
          /usr/local/bin/pip3.7 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          chmod +x /usr/local/aws/bin/aws
          
          # Installing aws cli -complete

          systemctl restart sshd.service
          systemctl restart sshd
          # Update etc/hosts
          fqdn_host_name=${pHostName2}
          #host_ip=$(hostname -i)


          echo "$host $fqdn_host_name $host" >> /etc/hosts

          #update /etc/postfix/main.cf
          sed -i 's/= hostname/'"= $host"'/g' /etc/postfix/main.cf

          #restart postfix service
          systemctl restart postfix
          #Install Cloudwatch agent.
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/redhat/amd64/latest/amazon-cloudwatch-agent.rpm
          rpm -U ./amazon-cloudwatch-agent.rpm

          # # Call cfn-init to perform other additional tasks realted appdynamics ageny
          cfn-init -v -c BootStrap --stack ${AWS::StackName} --resource rEc2Instance2 --region ${AWS::Region}

          #Install Signal Fx for Production landscape only
          # if [ "$landscape" = "PROD" ]
          # then
          #   echo "Installing SignalFx agents"
          #   signal_fx_token=`aws ssm get-parameter --name "/amtrak/cloud-solutions/service-catalog/ec2/signalfx-token" --output text --query Parameter.Value --region ${AWS::Region}`
          #   curl -sSL https://dl.signalfx.com/signalfx-agent.sh > ~/signalfx-agent.sh;
          #   chmod +x ~/signalfx-agent.sh
          #   ~/signalfx-agent.sh --realm us0 -- $signal_fx_token
          # fi

          # Change instance role
          # aws_instance_id=`wget -q -O- http://169.254.169.254/latest/meta-data/instance-id`

          dnf update -y 
          dnf install htop -y
          
          dnf clean all
          EC2_REGION=${pAWSregion}
          cd ~
          rm -rf ~/tmp
          # Start up the cfn-hup daemon to listen for changes to the EC2 metadata\n",
          cfn-hup || error_exit 'Failed to start cfn-hup'
           # Signal the status from cfn-init - This is signals Cloudformation template
          /usr/local/bin/cfn-signal -e $? \
            --stack ${AWS::StackName} \
            --resource rEc2Instance2  \
              --region ${AWS::Region}
  rELBLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${pDepartment}-${pProject}-${pLandscape}-ALB-iwsconsole${pDBCluster}
        
      Scheme: internal
      Type: !Ref pELBType
      Subnets:
          - !If
              - IsLegacyEnterprise
              - !If [cIsNonProd, !FindInMap [mAzToNonProdSubnetMap, !Ref pAvailabilityZone1, ELBSubNetId], !FindInMap [mAzToProdSubnetMap, !Ref pAvailabilityZone1, ELBSubNetId]]
              - !Sub '{{resolve:ssm:/desamist/cloud-solutions/service-catalog/ec2/${pLandscape}/${pAvailabilityZone1}}}'
          - !If
              - IsLegacyEnterprise
              - !If [cIsNonProd, !FindInMap [mAzToNonProdSubnetMap, !Ref pAvailabilityZone2, ELBSubNetId], !FindInMap [mAzToProdSubnetMap, !Ref pAvailabilityZone2, ELBSubNetId]]
              - !Sub '{{resolve:ssm:/desamist/cloud-solutions/service-catalog/ec2/${pLandscape}/${pAvailabilityZone2}}}'  ## change it us-east-1b
          - !If
              - IsLegacyEnterprise
              - !If [cIsNonProd, !FindInMap [mAzToNonProdSubnetMap, !Ref pAvailabilityZone3, ELBSubNetId], !FindInMap [mAzToProdSubnetMap, !Ref pAvailabilityZone3, ELBSubNetId]]
              - !Sub '{{resolve:ssm:/desamist/cloud-solutions/service-catalog/ec2/${pLandscape}/${pAvailabilityZone3}}}'

      SecurityGroups:
        - !Ref pSecurityGroup
      Tags:
        - Key: ApplicationGroup
          Value: !Ref pApplicationGroup
        - Key: ApplicationSubGroup
          Value: !Ref pApplicationSubGroup
        - Key: Project
          Value: !Ref pProject
        - Key: CostCenter
          Value: !Ref pCostCenter
        - Key: FundingSource
          Value: !Ref pFundingSource
        - Key: Landscape
          Value: !Ref pLandscape
        - Key: ITDR
          Value: !Ref pITDR
        - Key: WBSE
          Value: !Ref pWBSE
        - Key: Department
          Value: !Ref pDepartment
        - Key: Name
          Value: !Sub ${pDepartment}-${pProject}-${pLandscape}-ALB-iwsconsole${pDBCluster}
        - Key: aws-migration-project-id
          Value: !Ref pawsmigrationprojectid
        - Key: map-migrated
          Value: !Ref pmapmigrated
  rEC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${pDepartment}-${pProject}-${pLandscape}-iwsconsole${pDBCluster}      #-ALB-TG2
      Port: !Ref pTargetPort1
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      VpcId:
        !If
          - IsLegacyEnterprise
          - !FindInMap [mEC2Map, !Ref pLandscape, VPCId]
          - !Sub '{{resolve:ssm:/desamist/cloud-solutions/vpc}}'
      TargetGroupAttributes: 
              - 
                Key: "stickiness.enabled"
                Value: false
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "stickiness.type"
                Value: lb_cookie
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "30000"
      Targets:
        - Id: !Ref rEc2Instance1
        - Id: !Ref rEc2Instance2
        # - Id: !Ref rEc2Instance3
      Tags:
        - Key: ApplicationGroup
          Value: !Ref pApplicationGroup
        - Key: ApplicationSubGroup
          Value: !Ref pApplicationSubGroup
        - Key: Project
          Value: !Ref pProject
        - Key: CostCenter
          Value: !Ref pCostCenter
        - Key: FundingSource
          Value: !Ref pFundingSource
        - Key: Landscape
          Value: !Ref pLandscape
        - Key: ITDR
          Value: !Ref pITDR
        - Key: WBSE
          Value: !Ref pWBSE
        - Key: Department
          Value: !Ref pDepartment
        - Key: Name
          Value: !Sub ${pDepartment}-${pProject}-${pLandscape}-iwsconsole${pDBCluster}
        - Key: aws-migration-project-id
          Value: !Ref pawsmigrationprojectid
        - Key: map-migrated
          Value: !Ref pmapmigrated

  rELBHTTPListenerWithForward:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref rELBLoadBalancer
      Port: !Ref pHTTPListenerPort
      Protocol: HTTP
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: HTTPS
            Port: !Ref pHTTPSListenerPort
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"

  rELBHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref rELBLoadBalancer
      Port: !Ref pHTTPSListenerPort
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
      DefaultActions:
        - TargetGroupArn: !Ref rEC2TargetGroup
          Type: forward
      Certificates:
        - CertificateArn: !Ref pCertificateArn
  
  rResourceGroup:
    Type: "AWS::ResourceGroups::Group"
    Properties:
      Name: !Sub ${pDepartment}-${pProject}-${pLandscape}-${pApplicationGroup}-rg-iwsconsole${pDBCluster}
      Description: "A group that is based on a tag query"
      ResourceQuery:
        Type:
          "TAG_FILTERS_1_0"
        Query:
          ResourceTypeFilters:
            - "AWS::EC2::Instance"
          TagFilters:
            - 
              Key: Name
              Values: 
                - !Sub ${pDepartment}-${pProject}-${pLandscape}-iwsconsole${pDBCluster}1${pEnvironment}
                - !Sub ${pDepartment}-${pProject}-${pLandscape}-iwsconsole${pDBCluster}1${pEnvironment}
  rLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${pDepartment}-${pProject}-${pLandscape}-autoscaling-iwsconsole${pDBCluster}
      LaunchTemplateData:
          ImageId: '{{resolve:ssm:/desamist/cloud-solutions/rhel9/AMI}}'
          InstanceType: !Ref pInstanceType
          SecurityGroupIds:
           - !Ref pSecurityGroup
          UserData: !Base64 |
            #!/bin/bash
            
            # Installing ssm agent
            dnf install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            systemctl enable amazon-ssm-agent
            systemctl start amazon-ssm-agent
            systemctl status amazon-ssm-agent
            
            # Installing aws cli
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            /usr/local/bin/python3.7 awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            /usr/local/bin/pip3.7 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            chmod +x /usr/local/aws/bin/aws
            
            # Installing aws cli -complete
          
            
            dnf clean all
            EC2_REGION=${pAWSregion}
            cd ~
            rm -rf ~/tmp

  rAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    DependsOn:
      - rAutoScalingSNSTopic
    Properties:
      VPCZoneIdentifier: 
        - !If
              - IsLegacyEnterprise
              - !If [cIsNonProd, !FindInMap [mAzToNonProdSubnetMap, !Ref pAvailabilityZone1, ELBSubNetId], !FindInMap [mAzToProdSubnetMap, !Ref pAvailabilityZone1, ELBSubNetId]]
              - !Sub '{{resolve:ssm:/desamist/cloud-solutions/service-catalog/ec2/${pLandscape}/${pAvailabilityZone1}}}'
        - !If
              - IsLegacyEnterprise
              - !If [cIsNonProd, !FindInMap [mAzToNonProdSubnetMap, !Ref pAvailabilityZone2, ELBSubNetId], !FindInMap [mAzToProdSubnetMap, !Ref pAvailabilityZone2, ELBSubNetId]]
              - !Sub '{{resolve:ssm:/desamist/cloud-solutions/service-catalog/ec2/${pLandscape}/${pAvailabilityZone2}}}'  ## change it us-east-1b
        - !If
              - IsLegacyEnterprise
              - !If [cIsNonProd, !FindInMap [mAzToNonProdSubnetMap, !Ref pAvailabilityZone3, ELBSubNetId], !FindInMap [mAzToProdSubnetMap, !Ref pAvailabilityZone3, ELBSubNetId]]
              - !Sub '{{resolve:ssm:/desamist/cloud-solutions/service-catalog/ec2/${pLandscape}/${pAvailabilityZone3}}}'
     
      LaunchTemplate:
        LaunchTemplateId: !Ref rLaunchTemplate
        Version: !GetAtt rLaunchTemplate.LatestVersionNumber
      MinSize: '0'
      MaxSize: '1'
      DesiredCapacity: '0'
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      NotificationConfigurations:
      - TopicARN: !Ref rAutoScalingSNSTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        - autoscaling:TEST_NOTIFICATION
      AvailabilityZones: 
      - !Ref pAvailabilityZone1
      - !Ref pAvailabilityZone2
      - !Ref pAvailabilityZone3
      TargetGroupARNs:
        - !Ref rEC2TargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${pDepartment}-${pProject}-${pLandscape}-iwsconsole${pDBCluster}
          PropagateAtLaunch: false
        - Key: Department
          Value: !Ref pDepartment
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref pProject
          PropagateAtLaunch: true

        
  rAutoScalingSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: EC2LaunchNotification
      Subscription:
       - Endpoint: !Sub '{{resolve:ssm:/desamist/io/zos/OperatorEmail}}'
         Protocol: email
      Tags:
        - Key: Department
          Value: !Ref pDepartment
        - Key: Project
          Value: !Ref pProject

  rAutoScalingGroupScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroup
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
      Cooldown: '300'
  rCPUUtilizationAlarm1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${pDepartment}-${pProject}-CPUUtilizationAlarm-iwsconsole${pDBCluster}
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2 
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '60'
      Statistic: Average
      Threshold: 80  # Scale up when CPU utilization is 80% or more
      AlarmActions:
        - !Ref rAutoScalingGroupScaleUpPolicy
        - !Ref rAutoScalingSNSTopic
      Dimensions: 
        - Name: ec2instance
          Value: !Ref rEc2Instance1 
  rCPUUtilizationAlarm2:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${pDepartment}-${pProject}-CPUUtilizationAlarm-iwsconsole${pDBCluster}
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2 
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '60'
      Statistic: Average
      Threshold: 80  # Scale up when CPU utilization is 80% or more
      AlarmActions:
        - !Ref rAutoScalingGroupScaleUpPolicy
        - !Ref rAutoScalingSNSTopic
      Dimensions: 
        - Name: ec2instance
          Value: !Ref rEc2Instance2 
  rMemoryUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${pDepartment}-${pProject}-MemoryUtilizationAlarm-iwsconsole${pDBCluster}
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '2' 
      MetricName: MemoryUtilization
      Namespace: System/Linux
      Period: '60'
      Statistic: Average
      Threshold: 80  # Scale up when MemoryUtilization is 70% or more
      AlarmActions:
        - !Ref rAutoScalingGroupScaleUpPolicy
        - !Ref rAutoScalingSNSTopic
      Dimensions: 
        - Name: ec2instance
          Value: !Ref rEc2Instance1
  rMemoryUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${pDepartment}-${pProject}-MemoryUtilizationAlarm-iwsconsole${pDBCluster}
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '2' 
      MetricName: MemoryUtilization
      Namespace: System/Linux
      Period: '60'
      Statistic: Average
      Threshold: 80  # Scale up when MemoryUtilization is 70% or more
      AlarmActions:
        - !Ref rAutoScalingGroupScaleUpPolicy
        - !Ref rAutoScalingSNSTopic
      Dimensions: 
        - Name: ec2instance
          Value: !Ref rEc2Instance2
Outputs:
  CloudFormationLogs:
    Description: CloudFormation CloudFormationLogs 
    Value: !Sub 'https://console.aws.com/cloudformation/home?region=${AWS::Region}#/stacks/events?filteringText=${AWS::StackName}'
  SNSTopicARN:
    Description: The ARN of the SNS topic for Launch notifiacation
    Value: !Ref rAutoScalingSNSTopic